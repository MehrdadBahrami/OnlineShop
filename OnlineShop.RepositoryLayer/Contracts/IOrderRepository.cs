using OnlineShop.DomainLayer.Models;
using System.Collections.Generic;

namespace OnlineShop.RepositoryLayer.Contracts
{
    /// <summary>
    /// Repository interface for managing order data.
    /// </summary>
    public interface IOrderRepository
    {
        /// <summary>
        /// Place a new order.
        /// </summary>
        /// <param name="orderId">The unique identifier for the order (optional, might be generated by the system).</param>
        /// <param name="customerId">The unique identifier of the customer placing the order.</param>
        /// <param name="cartItems">The list of cart items representing the products in the order.</param>
        /// <returns>The order entity representing the placed order.</returns>
        Order PlaceOrder(int orderId, int customerId, List<CartItem> cartItems);

        /// <summary>
        /// Get an order by its unique identifier.
        /// </summary>
        /// <param name="orderId">The unique identifier of the order.</param>
        /// <returns>The order entity if found; otherwise, null.</returns>
        Order GetOrderById(int orderId);

        /// <summary>
        /// Get a list of orders placed by a specific customer.
        /// </summary>
        /// <param name="customerId">The unique identifier of the customer.</param>
        /// <returns>A list of order entities placed by the customer.</returns>
        List<Order> GetOrdersByCustomer(int customerId);

        /// <summary>
        /// Cancel an existing order.
        /// </summary>
        /// <param name="orderId">The unique identifier of the order to cancel.</param>
        void CancelOrder(int orderId);

        /// <summary>
        /// Update the status of an existing order.
        /// </summary>
        /// <param name="orderId">The unique identifier of the order to update.</param>
        /// <param name="newStatus">The new status to set for the order.</param>
        void UpdateOrderStatus(int orderId, string newStatus);
    }
}
